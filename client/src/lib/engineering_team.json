{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2713737c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from crewai import Agent, Task, Crew\n",
    "from src.event_listener.custom_event_streamer import CustomStreamEventListener\n",
    "from src.llms.opeanai_llm import OpenAILLM\n",
    "from src.llms.gemini_llm import GeminiLLM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fac335b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class EngineeringTeamCrew:\n",
    "    def __init__(self, requirements, module_name, class_name):\n",
    "        # initialize LLM clients\n",
    "        openai_llm = OpenAILLM().get_llm_model()\n",
    "        gemini_llm = GeminiLLM().get_llm_model()\n",
    "\n",
    "        # Store context\n",
    "        self.requirements = requirements\n",
    "        self.module_name = module_name\n",
    "        self.class_name = class_name\n",
    "\n",
    "        # Define agents\n",
    "        self._define_agents(openai_llm, gemini_llm)\n",
    "        \n",
    "        # Define tasks\n",
    "        self._define_tasks()\n",
    "\n",
    "    def _define_agents(self, openai_llm, gemini_llm):\n",
    "        self.engineering_lead = Agent(\n",
    "            llm=openai_llm,\n",
    "            role=\"Engineering Lead for the engineering team, directing the work of the engineer\",\n",
    "            goal=(\n",
    "                f\"Take the high level requirements described here and prepare a detailed design for the backend developer; \"\n",
    "                f\"everything should be in 1 python module; describe the function and method signatures in the module. \"\n",
    "                f\"The python module must be completely self-contained, and ready so that it can be tested or have a simple UI built for it. \"\n",
    "                f\"Here are the requirements: {self.requirements} \"\n",
    "                f\"The module should be named {self.module_name} and the class should be named {self.class_name}\"\n",
    "            ),\n",
    "            backstory=\"You're a seasoned engineering lead with a knack for writing clear and concise designs.\",\n",
    "        )\n",
    "\n",
    "        self.backend_engineer = Agent(\n",
    "            llm=openai_llm,\n",
    "            role=\"Python Engineer who can write code to achieve the design described by the engineering lead\",\n",
    "            goal=(\n",
    "                f\"Write a python module that implements the design described by the engineering lead, in order to achieve the requirements. \"\n",
    "                f\"The python module must be completely self-contained, and ready so that it can be tested or have a simple UI built for it. \"\n",
    "                f\"Here are the requirements: {self.requirements} \"\n",
    "                f\"The module should be named {self.module_name} and the class should be named {self.class_name}\"\n",
    "            ),\n",
    "            backstory=(\n",
    "                \"You're a seasoned python engineer with a knack for writing clean, efficient code. \"\n",
    "                \"You follow the design instructions carefully.\"\n",
    "            ),\n",
    "        )\n",
    "\n",
    "        self.frontend_engineer = Agent(\n",
    "            llm=openai_llm,\n",
    "            role=\"A Gradio expert to who can write a simple frontend to demonstrate a backend\",\n",
    "            goal=(\n",
    "                f\"Write a gradio UI that demonstrates the given backend, all in one file to be in the same directory as the backend module {self.module_name}. \"\n",
    "                f\"Here are the requirements: {self.requirements}\"\n",
    "            ),\n",
    "            backstory=(\n",
    "                \"You're a seasoned python engineer highly skilled at writing simple Gradio UIs for a backend class. \"\n",
    "                \"You produce a simple gradio UI that demonstrates the given backend class; you write the gradio UI in a module app.py that is in the same directory as the backend module {self.module_name}.\"\n",
    "            ),\n",
    "        )\n",
    "\n",
    "        self.test_engineer = Agent(\n",
    "            llm=openai_llm,\n",
    "            role=f\"An engineer with python coding skills who can write unit tests for the given backend module {self.module_name}\",\n",
    "            goal=(\n",
    "                f\"Write unit tests for the given backend module {self.module_name} and create a test_{self.module_name} in the same directory as the backend module.\"\n",
    "            ),\n",
    "            backstory=\"You're a seasoned QA engineer and software developer who writes great unit tests for python code.\",\n",
    "        )\n",
    "\n",
    "        self.agents = [\n",
    "            self.engineering_lead,\n",
    "            self.backend_engineer,\n",
    "            self.frontend_engineer,\n",
    "            self.test_engineer,\n",
    "        ]\n",
    "\n",
    "    def _define_tasks(self):\n",
    "        # Design task\n",
    "        self.design_task = Task(\n",
    "            description=(\n",
    "                f\"Take the high level requirements described here and prepare a detailed design for the engineer; \"\n",
    "                f\"everything should be in 1 python module, but outline the classes and methods in the module. \"\n",
    "                f\"Here are the requirements: {self.requirements} \"\n",
    "                \"IMPORTANT: Only output the design in markdown format, laying out in detail the classes and functions in the module, describing the functionality.\"\n",
    "            ),\n",
    "            expected_output=\"A detailed design for the engineer, identifying the classes and functions in the module.\",\n",
    "            agent=self.engineering_lead,\n",
    "            markdown=True,\n",
    "        )\n",
    "\n",
    "        # Code task\n",
    "        self.code_task = Task(\n",
    "            description=(\n",
    "                f\"Write a python module that implements the design described by the engineering lead, in order to achieve the requirements. \"\n",
    "                f\"Here are the requirements: {self.requirements}\"\n",
    "            ),\n",
    "            expected_output=(\n",
    "                \"A python module that implements the design and achieves the requirements. \"\n",
    "                \"IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks. \"\n",
    "                \"The output should be valid Python code that can be directly saved to a file and executed.\"\n",
    "            ),\n",
    "            agent=self.backend_engineer,\n",
    "            context=[self.design_task],\n",
    "            markdown=True,\n",
    "        )\n",
    "\n",
    "        # Frontend UI task\n",
    "        self.frontend_task = Task(\n",
    "            description=(\n",
    "                f\"Write a gradio UI in a module app.py that demonstrates the given backend class in {self.module_name}. \"\n",
    "                \"Assume there is only 1 user, and keep the UI very simple indeed - just a prototype or demo. \"\n",
    "                f\"Here are the requirements: {self.requirements}\"\n",
    "            ),\n",
    "            expected_output=(\n",
    "                \"A gradio UI in module app.py that demonstrates the given backend class. \"\n",
    "                \"The file should be ready so that it can be run as-is, in the same directory as the backend module, \"\n",
    "                \"and it should import the backend class from {self.module_name}. \"\n",
    "                \"IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks. \"\n",
    "                \"The output should be valid Python code that can be directly saved to a file and executed.\"\n",
    "            ),\n",
    "            agent=self.frontend_engineer,\n",
    "            context=[self.code_task],\n",
    "            markdown=True,\n",
    "        )\n",
    "\n",
    "        # Test task\n",
    "        self.test_task = Task(\n",
    "            description=(\n",
    "                f\"Write unit tests for the given backend module {self.module_name} and create a test_{self.module_name} in the same directory as the backend module.\"\n",
    "            ),\n",
    "            expected_output=(\n",
    "                f\"A test_{self.module_name} module that tests the given backend module. \"\n",
    "                \"IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks. \"\n",
    "                \"The output should be valid Python code that can be directly saved to a file and executed.\"\n",
    "            ),\n",
    "            agent=self.test_engineer,\n",
    "            context=[self.code_task],\n",
    "            markdown=True,\n",
    "        )\n",
    "\n",
    "        self.tasks = [\n",
    "            self.design_task,\n",
    "            self.code_task,\n",
    "            self.frontend_task,\n",
    "            self.test_task,\n",
    "        ]\n",
    "\n",
    "    def crew_formation(self):\n",
    "        return Crew(\n",
    "            agents=self.agents,\n",
    "            tasks=self.tasks,\n",
    "            event_listener=CustomStreamEventListener()\n",
    "        )\n",
    "\n",
    "    def get_tasks_output(self):\n",
    "        return {\n",
    "            \"design\": self.design_task.output,\n",
    "            \"code\": self.code_task.output,\n",
    "            \"frontend\": self.frontend_task.output,\n",
    "            \"test\": self.test_task.output,\n",
    "        }\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
