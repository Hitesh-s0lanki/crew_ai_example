{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24f084bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from crewai import Agent, Task, Crew\n",
    "from src.event_listener.custom_event_streamer import CustomStreamEventListener"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bddbd13",
   "metadata": {},
   "outputs": [],
   "source": [
    "class DebaterCrew:\n",
    "\n",
    "    def __init__(self, openai_llm, gemini_llm):\n",
    "        self.agents = []\n",
    "        self.tasks = [] \n",
    "        self.openai_llm = openai_llm\n",
    "        self.gemini_llm = gemini_llm\n",
    "\n",
    "    def define_agent(self):\n",
    "        self.debater = Agent(\n",
    "            llm = self.openai_llm,\n",
    "            role=\"A compelling debater\",\n",
    "            goal=\"Present a clear argument either in favor of or against the motion. The motion is: {motion}\",\n",
    "            backstory=\"\"\"You're an experienced debator with a knack for giving concise but convincing arguments.\n",
    "            The motion is: {motion}\"\"\"\n",
    "        )\n",
    "\n",
    "        self.judge= Agent(\n",
    "            llm = self.openai_llm,\n",
    "            role=\"Decide the winner of the debate based on the arguments presented\",\n",
    "            goal=\"\"\"Given arguments for and against this motion: {motion}, decide which side is more convincing,\n",
    "                    based purely on the arguments presented.\"\"\",\n",
    "            backstory=\"\"\"You are a fair judge with a reputation for weighing up arguments without factoring in\n",
    "            your own views, and making a decision based purely on the merits of the argument.\n",
    "            The motion is: {motion}\"\"\",\n",
    "        )\n",
    "\n",
    "        self.agents.append(self.debater)\n",
    "        self.agents.append(self.judge)\n",
    " \n",
    "    def define_task(self):\n",
    "        self.propose = Task(\n",
    "            description=\"\"\"You are proposing the motion: {motion}.\n",
    "            Come up with a clear argument in favor of the motion.\n",
    "            Be very convincing.\"\"\",\n",
    "            expected_output=\"\"\"Your clear argument in favor of the motion, in a concise manner.\"\"\",\n",
    "            agent=self.debater\n",
    "        )\n",
    "        \n",
    "        self.oppose = Task(\n",
    "            description=\"\"\"You are in opposition to the motion: {motion}.\n",
    "            Come up with a clear argument against the motion.\n",
    "            Be very convincing.\"\"\",\n",
    "            expected_output=\"\"\"Your clear argument against the motion, in a concise manner.\"\"\",\n",
    "            agent=self.debater,\n",
    "            markdown=True # Output formatted as markdown for clarity\n",
    "        )\n",
    "\n",
    "        self.decide = Task(\n",
    "            description=\"\"\"Review the arguments presented by the debaters and decide \n",
    "            which side is more convincing.\"\"\",\n",
    "            expected_output=\"\"\"Your decision on which side is more convincing, and why.\"\"\",\n",
    "            agent=self.judge,\n",
    "            markdown=True # Output formatted as markdown for clarity\n",
    "        )\n",
    "\n",
    "        self.tasks.append(self.propose)\n",
    "        self.tasks.append(self.oppose)\n",
    "        self.tasks.append(self.decide)\n",
    "\n",
    "    def get_tasks_output(self):\n",
    "        return {\n",
    "            \"propose\": self.propose.output,\n",
    "            \"oppose\": self.oppose.output,\n",
    "            \"decide\": self.decide.output\n",
    "        }\n",
    "    \n",
    "    def crew_formation(self):\n",
    "\n",
    "        self.define_agent()\n",
    "        self.define_task()\n",
    "\n",
    "        return Crew(\n",
    "            agents=self.agents,\n",
    "            tasks=self.tasks,\n",
    "            event_listener=CustomStreamEventListener()\n",
    "        )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.12.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
